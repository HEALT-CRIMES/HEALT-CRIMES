Aspectos básicos de las funciones de Python
Completado
100 XP
1 minuto
Las funciones son el siguiente paso después de haber aprendido los conceptos básicos de programación de Python. 
En su forma más sencilla, una función contiene código que siempre devuelve un valor (o valores). 
En algunos casos, una función también tiene entradas opcionales u obligatorias.

Al empezar a escribir código que duplica otras partes del programa, se convierte en una oportunidad perfecta para extraer el código en una función. 
Aunque compartir código común mediante funciones es útil, también se puede limitar el tamaño del código extrayendo partes en funciones más pequeñas (y legibles).

Los programas que evitan la duplicación y evitan funciones de gran tamaño mediante funciones más pequeñas son más legibles y fáciles de mantener.
También son más fáciles de depurar cuando las cosas no funcionan correctamente.

Hay varias reglas sobre las entradas de funciones que son fundamentales para aprovechar al máximo todo lo que las funciones tienen que ofrecer.

Funciones sin argumentos
Para crear una función, use la palabra clave def, seguida de un nombre, paréntesis y, después, del cuerpo con el código de función:
""""""""""""""""""""""""""""""""
def rocket_parts():
    print("payload, propellant, structure")
    
  La función rocket_parts() no toma ningún argumento e imprime una instrucción sobre la gravedad. 
  Si necesita usar un valor que devuelve una función, puede asignar la salida de la función a una variable:

>>> output = rocket_parts()
payload, propellant, structure
>>> output is None
True
""""""""""""""""""""""""""""""
def rocket_parts():
...     return "payload, propellant, structure"
...
>>> output = rocket_parts()
>>> output
'payload, propellant, structure'
"""""""""""""""""""""""""""""""
Argumentos opcionales y requeridos
En Python, varias funciones integradas requieren argumentos. Algunas funciones integradas hacen que los argumentos sean opcionales.
Las funciones integradas están disponibles de inmediato, por lo que no es necesario importarlas explícitamente.

Un ejemplo de una función integrada que requiere un argumento es any(). Esta función toma un objeto iterable (por ejemplo, una lista) y devuelve True
si algún elemento del objeto iterable es True. De lo contrario, devuelve False.



Copiar
>>> any([True, False, False])
True
>>> any([False, False, False])
False
Si llama a any() sin ningún argumento, se genera una excepción útil. El mensaje de error explica que necesita al menos un argumento:

>>> any()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: any() takes exactly one argument (0 given)
""""""""""""""""""""""""""""""""""""""""""""""""""""
Exigencia de un argumento
Si va a pilotar un cohete, una función sin entradas obligatorias es como un equipo con un botón que le indique la hora. Si presiona el botón, una voz computarizada le indicará la hora. Pero una entrada necesaria puede ser un destino para calcular la distancia del viaje. Las entradas obligatorias se denominan argumentos para la función.

Para requerir un argumento, póngalo entre paréntesis:

def distance_from_earth(destination):
    if destination == "Moon":
        return "238,855"
    else:
        return "Unable to compute to that destination"
        
        sin argumento
        distance_from_earth()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: distance_from_earth() missing 1 required positional argument: 'destination'

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
Varios argumentos necesarios
Para usar varios argumentos, debe separarlos con una coma. Vamos a crear una función que pueda calcular cuántos días 
se tardarán en llegar a un destino, dadas la distancia y una velocidad constante:

def days_to_complete(distance, speed):
    hours = distance/speed
    return hours/24



